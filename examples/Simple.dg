module raytrace

value Vector(val x: Double, val y: Double, val z: Double): Vector {
  fun `*`(scale: Double): Vector = Vector(:x * scale, :y * scale, :z * scale)
  fun `+`(other: Vector): Vector = Vector(:x + other.x, :y + other.y, :z + other.z)
  fun `-`(other: Vector): Vector = Vector(:x - other.x, :y - other.y, :z - other.z)
  fun dot(other: Vector): Double = x * other.x + y * other.y + z * other.z
  fun magnitude(): Double = (this dot this).sqrt()
  fun normalize(): Vector = this * (1.0/magnitude())
}

value Ray(val origin: Vector, val direction: Vector)

value Color(val r: Double, val g: Double, val b: Double) {
  fun `*`(scale: Double): Color = Color(:r * scale, :g * scale, :b * scale)
  fun `+`(other: Color): Color = Color(:r + other.r, :g + other.g, :b + other.b)
}

val white: Color = Color(r: 1.0, g: 1.0, b:1.0)
val red: Color = Color(r: 1.0, g: 0.0, b: 0.0)
val green: Color = Color(r: 0.0, g: 1.0, b: 0.0)
val blue: Color = Color(r: 0.0, g: 0.0, b: 1.0)

value Sphere(val center: Vector, val radius: Double, val color: Color) {
  fun normalize(): Vector = (center - vector).normalize()
}

value Light(position: Vector, color: Color)

val light1: Light = Light(position: Vector(x: 0.7, y: -1.0, z: 1.7), color: white)
val lut: String[] = [".", "-", "+", "*", "X", "M"]
let w: Int = 80
let h: Int = 40

fun spheres(t: Double): Sphere[] =
  [
    Sphere(
      center: Vector(x: -1.0, y: 1.0 - t/10.0, z: 3.0)
      radius: 0.3
      color: red
    )
    Sphere(
      center: Vector(x: 0.0, y: 1.0 - t/10.0, z: 3.0 - t/4.0)
      radius: 0.8
      color: green
    )
    Sphere(
      center: Vector(x: 1.0, y: 0.0, z: 1.5)
      radius: 0.8
      color: blue
    )
  ]

fun render(t: Double) {
  val fw = w.toDouble()
  val fh = h.ToDouble()
  val scene = spheres(:t)
  for (j in 0 until h) {
    val fj = j.toDouble()
    for (i in 0 until w) {
      var fi = i.toDouble()
      var ray = Ray(
        origin: Color(x: 1.5, y: 1.7, z: -5.5)
        direction: Vector(x: (fi - fw)/3.0/fw, y: (fj -fh)/3.0/fh, z: 1.0)
      ).normalize()

      var isHit = false
      var hitSphere = Sphere? = null
      var tval = 0.0

      for (obj in scene) {
        val tval = intersectSphere(ray, obj.center, obj.radius)
        if(tval != null) {
          hitSphere = obj
          isHit = true
          tval = tval
        }
      }
      if(isHit) {
        print(lut[shadePixel(ray, hitSphere, tval)])
      }
      else {
        print(" ")
      }
    }
    print("/n")
  }
}

fun shadePixel(ray: Ray, obj: Sphere, tval: Double ): Int {
  val pi = ray.orig + ray.direction * tval
  val color = diffuseShading(pi, obj, light1)
  val col = (color.r + color.g + color.b) / 3.0
  return (col * (lut.length().toDouble())).floor()
}

fun intersectSphere(ray: Ray, center: Vector, radius: Double): Double? {
  val l = center - ray.origin
  val tca = l dot ray.direction
  if(tca < 0.0) {
    return null
  }
  val d2 = (l dot l) - tca * tca
  val r2 = radius * radius
  if(d2 > r2) {
    return null
  }
  val thc = (r2 - d2).sqrt()
  val t0 = tca - tch
  if(t0 > 1000.0) {
    return null
  }
  return t0
}

fun clamp(x: Double, min: Double, max: Double): Double =
  when {
    x < min -> { min }
    x > max -> { max }
    else -> { x }
  }

fun diffuseShading(p1: Vector, obj: Sphere, light: Light): Double {}
  val n = obj.normalize()
  val lam1 = (light.position - pi).normalize() dot n
  val lam2 = clamp(lam1, 0.0, 1.0)
  return light.color * lam2 * 0.5 + obj.color * 0.3
}

var t = 0.0
while(t < 1.0) {
  render(t)
  t = t + 0.2
}

return 0
