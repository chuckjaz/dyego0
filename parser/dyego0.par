compilation-unit:                   sequence

sequence:                           sequencePart (COMMA sequencePart)* [COMMA]
sequencePart:                       SPREAD (vocabularyReference | expression) |
                                    loop-statement |
                                    while-statement |
                                    break-statement |
                                    continue-statement |
                                    return-statement |
                                    expression
vocabularyReference:                NAME (SCOPE NAME)*

expression:                         [NAME | SYMBOL]?op simple-expression ([NAME | SYMBOL]?op [simple-expression])* 
simple-expression:                  primitive (selector | call | lambda)*
primitive:                          literal | 
                                    initializer |
                                    lambda |
                                    definition |
                                    when-expression |
                                    LPAREN expression RPAREN
selector:                           DOT NAME
call:                               LPAREN [arguments] RPAREN
arguments:                          argument (COMMA argument)* [COMMA]
argument:                           NAME EQ expression |
                                    expression |
                                    SPLAT expression
if-expression:                      IF LPAREN expression RPAREN
                                        LBRACE sequence RBRACE [ELSE
                                        LBRACE sequence RBRACE]
when-expression:                    WHEN LPAREN expression RPAREN LBRACK when-clause (COMMA when-clause)* [COMMA] RBRACK
when-clause:                        expression ARROW LBRACK sequence RBRACK |
                                    ELSE ARROW LBRACK sequence RBRACK
literal:                            LIT_STRING | LIT_RUNE | LIT_INT | LIT_BYTE | LIT_UINT | LIT_LONG | LIT_ULONG |
                                    LIT_FLOAT | LIT_DOUBLE | TRUE | FALSE | NULL

type-literal:                       LT [type-parameter-clause BAR] [type-members] GT
type-parameter-clause:              type-parameters where-clause*
type-parameters:                    type-parameter (COMMA type-parameter)* [COMMA]
type-parameter:                     NAME [COLON name-reference]
type-members:                       type-member (COMMA type-member)* [COMMA]
type-member:                        identifier-list COLON type-reference
where-clause:                       WHERE type-reference EQ type-reference
identifier-list:                    NAME (COMMA NAME)* [COMMA]

vocabulary-literal:                 LT_BAR [vocabular-members] BAR_LT
vocabulary-members:                 vocabulary-member (COMMA vocabulary-member)* [COMMA]
vocabulary-member:                  vocabulary-operator-declaration |
                                    vocabulary-callable-declaration |
                                    vocabular-embedding
vocabulary-operator-declaration:    (INFIX | PREFIX | POSTFIX) OPERATOR vocabulary-names
                                        [vocabular-precedece-qualifier] [LEFT | RIGHT]
vocabular-names:                    NAME |
                                    IDENTIFIERS |
                                    LPAREN identifier-list RPAREN
vocabulary-precedece-qualifier:     (BEFORE | AFTER) [INFIX | PREFIX | POSTFIX] NAME

lambda-type-literal:                LBRACE [type-parameter-clause BAR] [formal-parameters] RBRACE AS type-reference

type-primitive:                     NAME |
                                    type-literal |
                                    lambda-type-literal
                                    LPAREN type-reference RPAREN

type-argument-clause:               LT type-arguments GT
type-arguments:                     type-argument (COMMA type-argument)*
type-argument:                      NAME EQ type-reference |
                                    type-reference
type-expression:                    type-primitive (selector | type-argument:-clause)*
type-reference:                     type-expression ([NAME | SYMBOL] [type-expression])*

intializer:                         read-only-array-initializer |
                                    mutable-array-initializer |
                                    read-only-object-initializer |
                                    mutable-object-initializer
read-only-array-initializer:        LBRACK [ array-elements ] RBRACK
mutable-array-initializer:          LBRACK BANG [ array-elements] BANG RBRACK
array-elements:                     array-element (COMMA array-element)* [COMMA]
array-element:                      expression |
                                    SPLAT expression
read-only-object-initializer:       LBRACK [type-qualifier] [ member-initializers ] RBRACK
mutable-object-initializer:         LBRACK_BANG [type-qualifier] [ member-initalizers ] BANG_RBRACK
type-qualifier:                     LT type-reference GT
member-initializers:                member-initializer (COMMA member-initializer) [COMMA]
member-initializer:                 NAME COLON expression |
                                    COLON expression |
                                    SPLAT expression
lambda:                             RBRACE [type-parameters-clause BAR] [formal-parameters ARROW] sequence LBRACE
formal-parameters:                  formal-parameter (COMMA formal-parameter)*
formal-parameter:                   NAME [ COLON type-reference ]

declaration:                        var-definition |
                                    let-definition 

let-definition:                     LET local-definitions |
                                    LET destructor-definitions
var-definition:                     VAR local-declaration |
                                    VAR destructor-declaration
local-definitions:                  local-definition (COMMA local-definition)* [COMMA]
local-definition:                   NAME [COLON type-reference] EQ expression
destructor-definition:              LBRACK destructure-fields RBRACK
destructor-fields:                  destructure-field (COMMA destructure-field)* [COMMA]
destructor-field:                   [VAR|LET] NAME [as NAME] [COLON type-reference]

loop-statement:                     LOOP [NAME] LBRACE sequence RBRACE
while-statement:                    WHILE [NAME] LPAREN expression RPAREN 
                                        LBRACE sequence RBRACE
break-statement:                    BREAK [NAME]
continue-statement:                 CONTINUE [NAME]
return-statement:                   RETURN expression

