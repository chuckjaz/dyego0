value Vector {
  x, y, z: float;

  operator *(a: Vector, s: float): Vector -> { x: x * s, y: y * s, z: z * s };
  operator +(a, b: Vector): Vector -> { x: a.x + b.x, y: a.y + b.y, z: a.z + b.z };
  operator -(a, b: Vector): Vector -> { x: a.x - b.x, y: a.y - b.y, z: a.z - b.z };
  operator dot(a, b: Vector): float -> a.x * b.x + a.y * b.y + a.z * b.z;
  property magnitude: float -> (this dot this).sqrt();
  property normalized: float -> this * 1.0/magnitude;
}

value Ray {
  orig, direction: Vector;
}

value Color {
  r, g, b: float;

  operator *(a: Color, s: float): Color -> { r: r * s, g: g * s, b: b * s };
  operator +(a, b: Color): Color -> { r: a.r + b.r, g: a.g + b.g, b: a.b + g.b };
}

value Sphere {
  center: Vector;
  radius: float;
  color: Color;

  method normal(point: Vector): float -> (point - center).normalized;
}

value Light {
  position: Vector;
  color: Color;
}


let white = { r: 1.0, g: 1.0, b: 1.0 };
let red = { r: 1.0, g: 0.0, b: 0.0 };
let green = { r: 0.0, g: 1.0, b: 0.0 };
let blue = { r: 0.0, g: 0.0, b: 1.0 };


let light1: Light = {
  position: { x: 0.7, y: -1.0, z: 1.7 },
  color: white
};

let lut: string[] = [ ".", "-", "+", "*", "X", "M" ];
let w = 20 * 4;
let h = 10 * 4;

let scene: Sphere[] = [
  { center: { x: -1.0, y: 1.0, z: 3.0 },
    radius: 0.3,
    color: red
  },
  { center: { x: 0.0, y: 0.0, z: 3.0 },
    radius: 0.8,
    color: green
  },
  { center: { x: 1.0, y: 0.0, z: 3.0 },
    radius: 0.3,
    color: blue
  }
];

for let j in 0..h {
  for let i in 0..w {
    let fw = w as float;
    let fi = i as float;
    let fj = j as float;
    let fh = h as float;

    let ray: Ray = {
      orig: { x: 0.0, y: 0.0, z: 0.0 },
      dir: { x: (fi - fw)/2.0/fw, y: (fj -fh)/2.0/fh, z: 1.0 }.normalized
    };

    var hitObj: { sphere: Sphere; tval: float; }? = nil;

    for let obj in scene {
      let ret = intersectSphere(ray, obj.center, obj.radius);
      if ret.hit {
        hitObj := { sphere: obj, tval: ret.tval };
      }
    }

    Console.print(pixel);
  }
  Console.println();
}

method shadePixel(ray: Ray, obj: Sphere, tval: float): int {
  let pi = ray.orig + ray.dir * tval;
  let color = diffuseShading(pi, obj, light1);
  let col = (color.r + color.g + color.b) / 3.0;
  return (col * lut.length) as int;
}

value HitPoint {
  hit: boolean;
  tval: float;
}

method intersectSphere(ray: Ray, center: Vector, radius: float): HitPoint {
  let l = center - ray.orig;
  let tca = l dot ray.dir;
  if tca < 0.0 {
    return { hit: false, tval: -1.0 };
  }
  let d2 = l dot l - tca * tca;
  let r2 = radius * radius;
  if d2 > r2 {
    return { hit: false, tval: -1.0 };
  }
  let thc = (r2 - d2).sqrt();
  let t0 = tca - thc;
  if t0 > 1000.0 {
    return { hit: false, tval: -1.0 };
  }
  return { hit: true, tval: t0 };
}

method clamp(x, a, b: float): float {
  if x < a { return a; }
  if x > b { return b; }
  return x;
}

method diffuseShading(pi: Vector, obj: Sphere, light: Light): Color {
  let n = obj.normal(pi);
  let lam1 = (light.position - pi).normalized dot n;
  let lam2 = clamp(lam1, 0.0, 1.0);
  return light.color * (lam2 * 0.5) + obj.color * 0.3;
}
