let valtype = <
  let i32 = 0x7Fub
  let i64 = 0x7Eub
  let f32 = 0x7Dub
  let f64 = 0x7Cub
>

let limits = <
  let min = 0x00ub
  let min_max = 0x81ub
>

let inst = <
  let unreachable = 0x00ub
  let nop = 0x01ub
  let block = 0x02ub
  let loop = 0x03ub
  let if = 0x04ub
  let else = 0x05ub
  let br = 0x0Cub
  let br_if = 0x0Dub
  let br_table = 0x0Eub
  let ret = 0x0Fub
  let call = 0x10ub
  let call_indirect = 0x11ub

  let drop = 0x1Aub
  let select = 0x1Bub

  let local = <
    let get = 0x20ub
    let set = 0x21ub
    let tee = 0x22ub
  >

  let global = <
    let get = 0x23ub
    let set = 0x24ub
  >

  let i32 = <
    let const = 0x41ub

    let load = 0x28ub

    let load8_s = 0x2Cub
    let load8_u = 0x2Dub
    let load16_s = 0x2Eub
    let load16_u = 0x2Fub

    let store = 0x36ub

    let store8 = 0x3Aub
    let store16 = 0x3Bub

    let eqz = 0x45ub
    let eq = 0x46ub
    let ne = 0x47ub
    let lt_s = 0x48ub
    let lt_u = 0x49ub
    let gt_s = 0x4Aub
    let gt_u = 0x4Bub
    let le_s = 0x4Cub
    let le_u = 0x4Dub
    let ge_s = 0x4Eub
    let ge_u = 0x4Fub

    let clz = 0x67ub
    let ctz = 0x68ub
    let popcnt = 0x69ub
    let add = 0x6Aub
    let sub = 0x6Bub
    let mul = 0x6Cub
    let div_s = 0x6Dub
    let div_u = 0x6Eub
    let rem_s = 0x6Fub
    let rem_u = 0x70ub
    let and = 0x71ub
    let or = 0x72ub
    let xor = 0x73ub
    let shl = 0x74ub
    let shr_s = 0x75ub
    let shr_u = 0x76ub
    let rotl = 0x77ub
    let rotr = 0x78ub

    let wrap_i64 = 0xA7ub
    let trunc_f32_s = 0xA8ub
    let trunc_f32_u = 0xA9ub
    let trunc_f64_s = 0xAAub
    let trunc_f64_u = 0xABub

    let reinterpret_f32 = 0xBCub

    let extend8_s = 0xC0ub
    let extend16_s = 0xC1ub
  >

  let i64 = <
    let const = 0x42ub

    let load = 0x29ub

    let load8_s = 0x30ub
    let load8_u = 0x31ub
    let load16_s = 0x32ub
    let load16_u = 0x33ub
    let load32_s = 0x34ub
    let load32_u = 0x35ub

    let store = 0x37ub

    let store8 = 0x3Cub
    let store16 = 0x3Dub
    let store32 = 0x3Eub

    let eqz = 0x50ub
    let eq = 0x51ub
    let ne = 0x52ub
    let lt_s = 0x53ub
    let lt_u = 0x54ub
    let gt_s = 0x55ub
    let gt_u = 0x56ub
    let le_s = 0x57ub
    let le_u = 0x58ub
    let ge_s = 0x59ub
    let ge_u = 0x5Aub

    let clz = 0x79ub
    let ctz = 0x7Aub
    let popcnt = 0x7Bub
    let add = 0x7Cub
    let sub = 0x7Dub
    let mul = 0x7Eub
    let div_s = 0x7Fub
    let div_u = 0x80ub
    let rem_s = 0x81ub
    let rem_u = 0x82ub
    let and = 0x83ub
    let or = 0x84ub
    let xor = 0x85ub
    let shl = 0x86ub
    let shr_s = 0x87ub
    let shr_u = 0x88ub
    let rotl = 0x89ub
    let rotr = 0x8Aub

    let extend_i32_s = 0xACub
    let extend_i32_u = 0xADub
    let trunc_f32_s = 0xAEub
    let trunc_f32_u = 0xAFub
    let trunc_f64_s = 0xB0ub
    let trunc_f64_u = 0xB1ub

    let reinterpret_f64 = 0xBDub

    let extend_8_s = 0xC0ub
    let extend_16_s = 0xC1ub
    let extend_32_s = 0xC2ub
  >

  let f32 = <
    let const = 0x43ub

    let eq = 0x5Bub
    let ne = 0x5Cub
    let lt = 0x5Dub
    let gt = 0x5Eub
    let le = 0x5Fub
    let ge = 0x60ub

    let abs = 0x8Bub
    let neg = 0x8Cub
    let ceil = 0x8Dub
    let floor = 0x8Eub
    let trunc = 0x8Fub
    let nearest = 0x90ub
    let sqrt = 0x91ub
    let add = 0x92ub
    let sub = 0x93ub
    let mul = 0x94ub
    let div = 0x95ub
    let min = 0x96ub
    let max = 0x97ub
    let copysign = 0x98ub

    let convert_i32_s = 0xB2ub
    let convert_i32_u = 0xB3ub
    let convert_i64_s = 0xB4ub
    let convert_i64_u = 0xB5ub
    let demote_f64 = 0xB6ub

    let reinterpret_i32 = 0xBEub
  >

  let f64 = <
    let const = 0x44ub

    let eq = 0x61ub
    let ne = 0x62ub
    let lt = 0x63ub
    let gt = 0x64ub
    let le = 0x65ub
    let ge = 0x66ub

    let abs = 0x99ub
    let neg = 0x9Aub
    let ceil = 0x9Bub
    let floor = 0x9Cub
    let trunc = 0x9Dub
    let nearest = 0x9Eub
    let sqrt = 0x9Fub
    let add = 0xA0ub
    let sub = 0xA1ub
    let mul = 0xA2ub
    let div = 0xA3ub
    let min = 0xA4ub
    let max = 0xA5ub
    let copysign = 0xA6ub

    let convert_i32_s = 0xB7ub
    let convert_i32_u = 0xB8ub
    let convert_i64_s = 0xB9ub
    let convert_i64_u = 0xBAub
    let promote_f32 = 0xBBub

    let reinterpret_i64 = 0xBFub
  >

  let memory = <
    let size = 0x3Fub
    let grow = 0x40ub
  >
>

<
  let valtype = valtype
  let inst = inst
  let limits = limits
>
